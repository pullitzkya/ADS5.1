package queue.playlist;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * 
 * @author jonathanherdt
 */
public class PlaylistEditorGUI extends javax.swing.JFrame {

  /**
	 * 
	 */
	private static final long serialVersionUID = -2361692671528157371L;

	/**
	 * Creates new form PlaylistEditorGUI
	 */
	public PlaylistEditorGUI() {
		initComponents();
		jukeboxPlaylist = new Playlist("Jukebox");
		queuePlaylist = new Playlist("Playlist");

		jQueuePlaylist.setListData(new Object[0]);
		try {
			jukeboxPlaylist.leseAusDatei(new File("./Queue-Playlist.txt"));
			refreshPlaylist(jJukebox, jukeboxPlaylist);
		} catch (IOException ex) {
			Logger.getLogger(PlaylistEditorGUI.class.getName()).log(
					Level.SEVERE, null, ex);
		}

	}

	private Playlist jukeboxPlaylist;
	private Playlist queuePlaylist;

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		jQueuePlaylist = new javax.swing.JList();
		addItemButton = new javax.swing.JButton();
		jScrollPane2 = new javax.swing.JScrollPane();
		jJukebox = new javax.swing.JList();
		playlistLabel = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		deleteButton = new javax.swing.JButton();
		upButton = new javax.swing.JButton();
		downButton = new javax.swing.JButton();
		addPlaylistButton = new javax.swing.JButton();
		playButton = new javax.swing.JButton();

		addItemButton
				.setToolTipText("Ausgewähltes Jukebox-Element an Ende von Playlist anhängen.");
		deleteButton.setToolTipText("Ausgewähltes Playlist-Element entfernen");
		upButton.setToolTipText("Ausgewähltes Playlist-Element eine Position nach oben verschieben");
		downButton
				.setToolTipText("Ausgewähltes Playlist-Element eine Position nach unten verschieben");
		addPlaylistButton
				.setToolTipText("Inhalt von Playlist-Datei an bestehende Playlist anhängen.");
		playButton.setToolTipText("Erstes Element der Playlist spielen.");

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setResizable(false);

		jQueuePlaylist.setModel(new javax.swing.AbstractListModel() {
			/**
			 * 
			 */
			private static final long serialVersionUID = -8166999897762212131L;
			String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4",
					"Item 5" };

			public int getSize() {
				return strings.length;
			}

			public Object getElementAt(int i) {
				return strings[i];
			}
		});
		jScrollPane1.setViewportView(jQueuePlaylist);

		addItemButton.setText("→");
		addItemButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addItemButtonActionPerformed(evt);
			}
		});

		jJukebox.setModel(new javax.swing.AbstractListModel() {
			/**
			 * 
			 */
			private static final long serialVersionUID = -7690006135752759522L;
			String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4",
					"Item 5" };

			public int getSize() {
				return strings.length;
			}

			public Object getElementAt(int i) {
				return strings[i];
			}
		});
		jScrollPane2.setViewportView(jJukebox);

		playlistLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		playlistLabel.setText("Playlist");

		jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel2.setText("Jukebox");

		deleteButton.setText("X");
		deleteButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				deleteButtonActionPerformed(evt);
			}
		});

		upButton.setText("↑");
		upButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				upButtonActionPerformed(evt);
			}
		});

		downButton.setText("↓");
		downButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				downButtonActionPerformed(evt);
			}
		});

		addPlaylistButton.setText("+");
		addPlaylistButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						addPlaylistButtonActionPerformed(evt);
					}
				});

		playButton.setText("▶");
		playButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				playButtonActionPerformed(evt);
			}
		});

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(layout
						.createSequentialGroup()
						.addContainerGap()
						.add(layout
								.createParallelGroup(
										org.jdesktop.layout.GroupLayout.TRAILING,
										false)
								.add(org.jdesktop.layout.GroupLayout.LEADING,
										jScrollPane2)
								.add(jLabel2,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										300, Short.MAX_VALUE))
						.add(12, 12, 12)
						.add(layout
								.createParallelGroup(
										org.jdesktop.layout.GroupLayout.LEADING)
								.add(org.jdesktop.layout.GroupLayout.TRAILING,
										playlistLabel,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										300,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
								.add(org.jdesktop.layout.GroupLayout.TRAILING,
										layout.createSequentialGroup()
												.add(layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(addItemButton,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																48,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
														.add(deleteButton,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																48,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
														.add(upButton,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																48,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
														.add(downButton,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																48,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
														.add(addPlaylistButton,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																48,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
														.add(playButton,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																48,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
												.addPreferredGap(
														org.jdesktop.layout.LayoutStyle.RELATED,
														12, Short.MAX_VALUE)
												.add(jScrollPane1,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
														300,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
												.addContainerGap()))));
		layout.setVerticalGroup(layout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(org.jdesktop.layout.GroupLayout.TRAILING,
						layout.createSequentialGroup()
								.addContainerGap()
								.add(layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.BASELINE)
										.add(playlistLabel).add(jLabel2))
								.addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED)
								.add(layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.LEADING)
										.add(layout
												.createParallelGroup(
														org.jdesktop.layout.GroupLayout.LEADING,
														false)
												.add(jScrollPane1,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														342, Short.MAX_VALUE)
												.add(jScrollPane2))
										.add(layout
												.createSequentialGroup()
												.add(addItemButton)
												.addPreferredGap(
														org.jdesktop.layout.LayoutStyle.RELATED)
												.add(deleteButton)
												.addPreferredGap(
														org.jdesktop.layout.LayoutStyle.RELATED)
												.add(upButton)
												.addPreferredGap(
														org.jdesktop.layout.LayoutStyle.RELATED)
												.add(downButton)
												.addPreferredGap(
														org.jdesktop.layout.LayoutStyle.RELATED)
												.add(addPlaylistButton)
												.addPreferredGap(
														org.jdesktop.layout.LayoutStyle.RELATED,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.add(playButton)))
								.addContainerGap(
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addItemButtonActionPerformed
		Object[] musiktitel = jJukebox.getSelectedValues();
		for (Object aktuellerTitel : musiktitel) {
			queuePlaylist.hinzufuegenAmEnde((Musiktitel) aktuellerTitel);
		}
		refreshPlaylist(jQueuePlaylist, queuePlaylist);
	}// GEN-LAST:event_addItemButtonActionPerformed

	private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {
		queuePlaylist.play();
		int[] selected = jQueuePlaylist.getSelectedIndices();
		for (int i = 0; i < selected.length; i++) {
			selected[i] = selected[i] - 1;
		}
		refreshPlaylist(jQueuePlaylist, queuePlaylist);
		jQueuePlaylist.setSelectedIndices(selected);
	}

	private void loadFile(Playlist playlist) {
		JFileChooser jFileChooser = new JFileChooser();
		if (jFileChooser.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
			try {
				playlist.leseAusDatei(jFileChooser.getSelectedFile());
			} catch (IOException ex) {
				Logger.getLogger(PlaylistEditorGUI.class.getName()).log(
						Level.SEVERE, null, ex);
			}
		}
	}

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deleteButtonActionPerformed
		Object[] musiktitel = jQueuePlaylist.getSelectedValues();
		for (Object aktuellerTitel : musiktitel) {
			queuePlaylist.entferneMusiktitel((Musiktitel) aktuellerTitel);
		}
		int[] indices = jQueuePlaylist.getSelectedIndices();
		for (int i = 0; i < indices.length; i++) {
			indices[i] = indices[i] - 1;
		}
		refreshPlaylist(jQueuePlaylist, queuePlaylist);
		jQueuePlaylist.setSelectedIndices(indices);
	}// GEN-LAST:event_deleteButtonActionPerformed

	private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_upButtonActionPerformed
		if (jQueuePlaylist.getSelectedIndices()[0] > 0) {
			Object[] musiktitel = jQueuePlaylist.getSelectedValues();
			for (int i = 0; i < musiktitel.length; i++) {
				queuePlaylist
						.bewegeTitelEinePositionZurueck((Musiktitel) musiktitel[i]);
			}
			int[] selected = jQueuePlaylist.getSelectedIndices();
			for (int i = 0; i < selected.length; i++) {
				selected[i] = selected[i] - 1;
			}
			refreshPlaylist(jQueuePlaylist, queuePlaylist);
			jQueuePlaylist.setSelectedIndices(selected);
		}
	}// GEN-LAST:event_upButtonActionPerformed

	private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_downButtonActionPerformed
		int[] selected = jQueuePlaylist.getSelectedIndices();
		if (!(selected[selected.length - 1] == jQueuePlaylist.getModel()
				.getSize() - 1)) {
			Object[] musiktitel = jQueuePlaylist.getSelectedValues();
			for (int i = musiktitel.length - 1; i >= 0; i--) {
				queuePlaylist
						.bewegeTitelEinePositionWeiter((Musiktitel) musiktitel[i]);
			}
			for (int i = 0; i < selected.length; i++) {
				selected[i] = selected[i] + 1;
			}
			refreshPlaylist(jQueuePlaylist, queuePlaylist);
			jQueuePlaylist.setSelectedIndices(selected);
		}
	}// GEN-LAST:event_downButtonActionPerformed

	private void addPlaylistButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addPlaylistButtonActionPerformed
		Playlist queue = new Playlist("Temp");
		loadFile(queue);
		queuePlaylist.haengePlaylistAn(queue);
		refreshPlaylist(jQueuePlaylist, queuePlaylist);
	}// GEN-LAST:event_addPlaylistButtonActionPerformed

	private void refreshPlaylist(JList jList, Playlist playlist) {
		jList.setListData(playlist.getMusiktitel());
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			// for (javax.swing.UIManager.LookAndFeelInfo info :
			// javax.swing.UIManager
			// .getInstalledLookAndFeels()) {
			// if ("Nimbus".equals(info.getName())) {
			// javax.swing.UIManager.setLookAndFeel(info.getClassName());
			// break;
			// }
			// }
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(
					PlaylistEditorGUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(
					PlaylistEditorGUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(
					PlaylistEditorGUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(
					PlaylistEditorGUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new PlaylistEditorGUI().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton addItemButton;
	private javax.swing.JButton addPlaylistButton;
	private javax.swing.JButton deleteButton;
	private javax.swing.JButton downButton;
	private javax.swing.JList jJukebox;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JList jQueuePlaylist;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JLabel playlistLabel;
	private javax.swing.JButton upButton;
	private javax.swing.JButton playButton;
	// End of variables declaration//GEN-END:variables
}
